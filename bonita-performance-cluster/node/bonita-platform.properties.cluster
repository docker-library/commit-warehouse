#Bonita platform core configuration

#Default service accessors

platformClassName=com.bonitasoft.engine.service.impl.SpringPlatformServiceAccessor
tenantClassName=com.bonitasoft.engine.service.impl.SpringTenantServiceAccessor
sessionAccessor=org.bonitasoft.engine.service.impl.SpringSessionAccessor
apiAccessResolver=com.bonitasoft.engine.service.impl.APIAccessResolverImpl
serverApi=com.bonitasoft.engine.api.impl.ServerAPIExt

#Platform administrator
platformAdminUsername=platformAdmin
platformAdminPassword=platform

#this datasource name is used by the engine to get connected to the database
database.journal.datasource.name=${sysprop.bonita.database.journal.datasource.name:java:comp/env/bonitaDS}
database.sequence.manager.datasource.name=${sysprop.bonita.database.sequence.manager.datasource.name:java:comp/env/bonitaSequenceManagerDS}

# By default, get DB vendor type from JVM System Property. If not set, fallback on value after semi-colon (e.g. h2)
db.vendor=${sysprop.bonita.db.vendor:h2}

#Hibernate specific configurations
hibernate.journal.show_sql=false
hibernate.journal.format_sql=false
hibernate.journal.use_sql_comments=false

# Level of the checking for the presence of the "ORDER BY" clause for the queries who return a list (NONE, WARNING, STRICT)
orderByCheckingMode=NONE

org.bonitasoft.engine.archive.name=DEFINITIVE_0
org.bonitasoft.engine.archive.oldestTime=1230739200052
org.bonitasoft.engine.archive.newestTime=9999999999999
#Seconds Minutes Hours Day-of-Month Month Day-of-Week Year (optional field)
org.bonitasoft.engine.cron=0/5 * * * * ?
org.bonitasoft.engine.clean.invalid.sessions.cron=none

hibernate.transaction.jta_platform = ${sysprop.bonita.hibernate.transaction.jta_platform:org.bonitasoft.engine.persistence.JNDIBitronixJtaPlatform}
transaction.manager=${sysprop.bonita.transaction.manager:java:comp/UserTransaction}
userTransaction=${sysprop.bonita.userTransaction:java:comp/UserTransaction}

# If platform is not already created and initialized (The 'platform' table exists in the database) and
# platform.create is set to true, then the platform will be created. Ignored if platform is already created:
platform.create=true

# automatically start/stop cluster node at startup/shutdown (only useful in a clustered environment):
node.start=true
node.stop=true
